title = "Web-only",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot2 = ggplot(web_phone_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none")+
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot3 = ggplot(web_phone_video_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Video/Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot3 = ggplot(web_phone_video_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Video/Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
```{r plots, fig.cap='Voter Emotions and Voter Turnout. The red series did not vote; the blue series did vote.', fig.pos='!b', fig.height=2.7}
grid.arrange(plot1, plot2, plot3, ncol=3)
test1.wvalue
test1.pvalue
test1 = wilcox.test(x = Dem_diff_web, y = Rep_diff_web,
alternative = "two.sided", correct=FALSE)
test2 = wilcox.test(x = Dem_diff_web_phone, y = Rep_diff_web_phone,
alternative = "two.sided", correct = FALSE)
test3 = wilcox.test(x = Dem_diff_web_phone_video, y = Rep_diff_web_phone_video,
alternative = "two.sided", correct = FALSE)
test1.pvalue
test1
test1$p.value
test1$statistic
test1$parameter
wilcox_test(x = Dem_diff_web, y = Rep_diff_web)
library(tidyverse)
library(magrittr)
library(knitr)
library(patchwork)
require(gridExtra)
library(moments)
library(reshape2)
library(ggplot2)
library(dplyr)
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
library(kableExtra)
theme_set(theme_bw())
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
anes_timeseries_2020_csv_20220210 = read.csv("/Users/garykong/My Drive (Berkeley)/DATASCI W203/lab-1-caldwell_kong_somu_zhu/datasets/anes_timeseries_2020_csv_20220210.csv")
ANES = subset(anes_timeseries_2020_csv_20220210,
select = c(V200003, V201025x, V201231x, V202051, V200004, V202052, V202065x, V202066, V202119)) ## 8280 rows to begin with across all survey methods
ANES = ANES[!ANES$V200003 == 2,] ## 5441 rows
ANES = ANES[ANES$V200004 == 3,] #4783 rows
voting_logic <- function(df){
df$Voter = ( (df$V201025x== 3) |
(df$V201025x == 4) |
(df$V202052 == 1) |
(df$V202051 == 1) | (df$V202051 == 2) |
(df$V202066 == 4) )
df = df[df$Voter == TRUE,]
return (df)
}
ANES = voting_logic(ANES) #4507 rows
party_logic <- function(df){
df$Party = ifelse(df$V202065x==1, "Democrat",
ifelse(df$V202065x==2, "Republican",
ifelse((df$V201231x == 1) | (df$V201231x == 2) | (df$V201231x == 3), "Democrat",
ifelse((df$V201231x == 5) | (df$V201231x == 6) | (df$V201231x == 7), "Republican", "Other"))))
df = filter(df, Party == "Democrat" | Party == "Republican") ## removing non-Democrats or Republicans
return (df)
}
ANES = party_logic(ANES) #4098 rows
ANES = ANES[ANES$V202119 > 0,] ## 3772 rows
colnames(ANES)[colnames(ANES) == "V202119"] ="Voting_Difficulty_Level"
# Separate data by survey method
ANES = ANES[(ANES$V200003==3 | ANES$V200003==4 | ANES$V200003==5 | ANES$V200003==6),]
ANES$Survey = ifelse((ANES$V200003==3 | ANES$V200003==4), "Web-only",
ifelse(ANES$V200003==5, "Phone/Web",
ifelse(ANES$V200003==6, "Video/Phone/Web", "Other")))
# Splitting into three groups and stratifying
Web_Only = ANES[(ANES$V200003==3 | ANES$V200003==4),]
Web_Phone = ANES[ANES$V200003==5,]
Web_Phone_Video = ANES[ANES$V200003==6,]
# 1. Web-only
# Get crosstab data as a dataframe
web_df =  as.data.frame.matrix(crosstab(Web_Only, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_df = cbind(Difficulty=c(1:5, "Sum"), web_df)
web_df = web_df[web_df$Difficulty!="Sum",]
web_df = melt(web_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_df)[colnames(web_df) == "variable"] = "Party"
web_df$Percentage_of_Party = round(web_df$Percentage_of_Party, 1)
# 2. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_df =  as.data.frame.matrix(crosstab(Web_Phone, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_df)
web_phone_df = web_phone_df[web_phone_df$Difficulty!="Sum",]
web_phone_df = melt(web_phone_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_df)[colnames(web_phone_df) == "variable"] = "Party"
web_phone_df$Percentage_of_Party = round(web_phone_df$Percentage_of_Party, 1)
# 3. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_video_df =  as.data.frame.matrix(crosstab(Web_Phone_Video, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_video_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_video_df)
web_phone_video_df = web_phone_video_df[web_phone_video_df$Difficulty!="Sum",]
web_phone_video_df = melt(web_phone_video_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_video_df)[colnames(web_phone_video_df) == "variable"] = "Party"
web_phone_video_df$Percentage_of_Party = round(web_phone_video_df$Percentage_of_Party, 1)
colors = c("dodgerblue1", "brown2")
plot1 = ggplot(web_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Web-only",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot2 = ggplot(web_phone_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none")+
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot3 = ggplot(web_phone_video_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Video/Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
grid.arrange(plot1, plot2, plot3, ncol=3)
dist_df = as.data.frame.matrix(crosstab(ANES, row.vars = "Survey", col.vars = "Party", type="c")$crosstab)
dist_df = dist_df[1:3, ]
dist_df = dist_df[order(-dist_df$Democrat),]
kable(dist_df, digits = 1, booktabs = TRUE, caption = "Distribution of valid responses, by party and survey method")%>%
kable_styling(latex_options = "hold_position", full_width = F)
# Web Only survey respondents
Dem_diff_web = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Republican",], select=Voting_Difficulty_Level)))
# Phone/Web survey respondents
Dem_diff_web_phone = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web_phone = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Republican",], select=Voting_Difficulty_Level)))
# Video/Phone/Web survey respondents
Dem_diff_web_phone_video = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web_phone_video = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Republican",], select=Voting_Difficulty_Level)))
wilcox_test(x = Dem_diff_web, y = Rep_diff_web)
Dem_diff_web
Rep_diff_web
# Web Only survey respondents
Web_only
# Web Only survey respondents
Web_Only
wilcox.text(Voting_Difficulty_Level ~ Part)
wilcox.text(Voting_Difficulty_Level ~ Party)
?wilcox
?wilcox.test
wilcox.test(Web_Only$Voting_Difficulty_Level, Web_Only$Party)
wilcox.test(Web_Only$Party, Web_Only$Voting_Difficulty_Level)
library(tidyverse)
library(magrittr)
library(knitr)
library(patchwork)
require(gridExtra)
library(moments)
library(reshape2)
library(ggplot2)
library(dplyr)
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
library(kableExtra)
theme_set(theme_bw())
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
anes_timeseries_2020_csv_20220210 = read.csv("/Users/garykong/My Drive (Berkeley)/DATASCI W203/lab-1-caldwell_kong_somu_zhu/datasets/anes_timeseries_2020_csv_20220210.csv")
ANES = subset(anes_timeseries_2020_csv_20220210,
select = c(V200003, V201025x, V201231x, V202051, V200004, V202052, V202065x, V202066, V202119)) ## 8280 rows to begin with across all survey methods
ANES = ANES[!ANES$V200003 == 2,] ## 5441 rows
ANES = ANES[ANES$V200004 == 3,] #4783 rows
voting_logic <- function(df){
df$Voter = ( (df$V201025x== 3) |
(df$V201025x == 4) |
(df$V202052 == 1) |
(df$V202051 == 1) | (df$V202051 == 2) |
(df$V202066 == 4) )
df = df[df$Voter == TRUE,]
return (df)
}
ANES = voting_logic(ANES) #4507 rows
party_logic <- function(df){
df$Party = ifelse(df$V202065x==1, "Democrat",
ifelse(df$V202065x==2, "Republican",
ifelse((df$V201231x == 1) | (df$V201231x == 2) | (df$V201231x == 3), "Democrat",
ifelse((df$V201231x == 5) | (df$V201231x == 6) | (df$V201231x == 7), "Republican", "Other"))))
df = filter(df, Party == "Democrat" | Party == "Republican") ## removing non-Democrats or Republicans
return (df)
}
ANES = party_logic(ANES) #4098 rows
ANES = ANES[ANES$V202119 > 0,] ## 3772 rows
colnames(ANES)[colnames(ANES) == "V202119"] ="Voting_Difficulty_Level"
# Separate data by survey method
ANES = ANES[(ANES$V200003==3 | ANES$V200003==4 | ANES$V200003==5 | ANES$V200003==6),]
ANES$Survey = ifelse((ANES$V200003==3 | ANES$V200003==4), "Web-only",
ifelse(ANES$V200003==5, "Phone/Web",
ifelse(ANES$V200003==6, "Video/Phone/Web", "Other")))
# Splitting into three groups and stratifying
Web_Only = ANES[(ANES$V200003==3 | ANES$V200003==4),]
Web_Phone = ANES[ANES$V200003==5,]
Web_Phone_Video = ANES[ANES$V200003==6,]
# 1. Web-only
# Get crosstab data as a dataframe
web_df =  as.data.frame.matrix(crosstab(Web_Only, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_df = cbind(Difficulty=c(1:5, "Sum"), web_df)
web_df = web_df[web_df$Difficulty!="Sum",]
web_df = melt(web_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_df)[colnames(web_df) == "variable"] = "Party"
web_df$Percentage_of_Party = round(web_df$Percentage_of_Party, 1)
# 2. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_df =  as.data.frame.matrix(crosstab(Web_Phone, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_df)
web_phone_df = web_phone_df[web_phone_df$Difficulty!="Sum",]
web_phone_df = melt(web_phone_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_df)[colnames(web_phone_df) == "variable"] = "Party"
web_phone_df$Percentage_of_Party = round(web_phone_df$Percentage_of_Party, 1)
# 3. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_video_df =  as.data.frame.matrix(crosstab(Web_Phone_Video, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_video_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_video_df)
web_phone_video_df = web_phone_video_df[web_phone_video_df$Difficulty!="Sum",]
web_phone_video_df = melt(web_phone_video_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_video_df)[colnames(web_phone_video_df) == "variable"] = "Party"
web_phone_video_df$Percentage_of_Party = round(web_phone_video_df$Percentage_of_Party, 1)
colors = c("dodgerblue1", "brown2")
plot1 = ggplot(web_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Web-only",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot2 = ggplot(web_phone_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none")+
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot3 = ggplot(web_phone_video_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Video/Phone/Web",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
grid.arrange(plot1, plot2, plot3, ncol=3)
dist_df = as.data.frame.matrix(crosstab(ANES, row.vars = "Survey", col.vars = "Party", type="c")$crosstab)
dist_df = dist_df[1:3, ]
dist_df = dist_df[order(-dist_df$Democrat),]
kable(dist_df, digits = 1, booktabs = TRUE, caption = "Distribution of valid responses, by party and survey method")%>%
kable_styling(latex_options = "hold_position", full_width = F)
# Web Only survey respondents
Wem_diff_web = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Republican",], select=Voting_Difficulty_Level)))
# Phone/Web survey respondents
Dem_diff_web_phone = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web_phone = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Republican",], select=Voting_Difficulty_Level)))
# Video/Phone/Web survey respondents
Dem_diff_web_phone_video = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_diff_web_phone_video = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Republican",], select=Voting_Difficulty_Level)))
test1 = wilcox.test(x = Dem_diff_web, y = Rep_diff_web, alternative = "two.sided", correct=FALSE)
test2 = wilcox.test(x = Dem_diff_web_phone, y = Rep_diff_web_phone, alternative = "two.sided", correct = FALSE)
test3 = wilcox.test(x = Dem_diff_web_phone_video, y = Rep_diff_web_phone_video,
alternative = "two.sided", correct = FALSE)
## Cross-tabs by survey group
# 1. Web only
# Get crosstab data as a dataframe
c_web = as.data.frame.matrix(crosstab(Web_Only, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web = cbind(Difficulty=c(1:5, "Sum"), c_web)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web[nrow(c_web)+1,] =
c("Not Difficult (1-2)", round(c_web$Democrat[1]+c_web$Democrat[2], digits = 2), round(c_web$Republican[1]+c_web$Republican[2], digits = 2))
# Transform values to numeric
c_web$Democrat = sapply(c_web$Democrat, as.numeric)
c_web$Republican = sapply(c_web$Republican, as.numeric)
c_web[nrow(c_web)+1,] =
c("Difficult (3-5)", round(c_web$Democrat[3]+c_web$Democrat[4]+c_web$Democrat[5], digits = 2), round(c_web$Republican[3]+c_web$Republican[4]+c_web$Republican[5], digits = 2))
c_web$Delta = sapply(c_web$Democrat, as.numeric) - sapply(c_web$Republican, as.numeric)
# 2. Phone/Web
# Get crosstab data as a dataframe
c_web_phone = as.data.frame.matrix(crosstab(Web_Phone, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web_phone = cbind(Difficulty=c(1:5, "Sum"), c_web_phone)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web_phone[nrow(c_web_phone)+1,] =
c("Not Difficult (1-2)", round(c_web_phone$Democrat[1]+c_web_phone$Democrat[2], digits = 2), round(c_web_phone$Republican[1]+c_web_phone$Republican[2], digits = 2))
# Transform values to numeric
c_web_phone$Democrat = sapply(c_web_phone$Democrat, as.numeric)
c_web_phone$Republican = sapply(c_web_phone$Republican, as.numeric)
c_web_phone[nrow(c_web_phone)+1,] =
c("Difficult (3-5)", round(c_web_phone$Democrat[3]+c_web_phone$Democrat[4]+c_web_phone$Democrat[5], digits = 2), round(c_web_phone$Republican[3]+c_web_phone$Republican[4]+c_web_phone$Republican[5], digits = 2))
c_web_phone$Delta = sapply(c_web_phone$Democrat, as.numeric) - sapply(c_web_phone$Republican, as.numeric)
# 3. Web_Phone_Video
# Get crosstab data as a dataframe
c_web_phone_video = as.data.frame.matrix(crosstab(Web_Phone_Video, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web_phone_video = cbind(Difficulty=c(1:5, "Sum"), c_web_phone_video)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web_phone_video[nrow(c_web_phone_video)+1,] =
c("Not Difficult (1-2)", round(c_web_phone_video$Democrat[1]+c_web_phone_video$Democrat[2], digits = 2), round(c_web_phone_video$Republican[1]+c_web_phone_video$Republican[2], digits = 2))
# Transform values to numeric
c_web_phone_video$Democrat = sapply(c_web_phone_video$Democrat, as.numeric)
c_web_phone_video$Republican = sapply(c_web_phone_video$Republican, as.numeric)
c_web_phone_video[nrow(c_web_phone_video)+1,] =
c("Difficult (3-5)", round(c_web_phone_video$Democrat[3]+c_web_phone_video$Democrat[4]+c_web_phone_video$Democrat[5], digits = 2), round(c_web_phone_video$Republican[3]+c_web_phone_video$Republican[4]+c_web_phone_video$Republican[5], digits = 2))
c_web_phone_video$Delta = sapply(c_web_phone_video$Democrat, as.numeric) - sapply(c_web_phone_video$Republican, as.numeric)
# tail(c_web_phone_video,2)
## Combined cross-tabs across survey groups
c_web_tail = tail(c_web,2)
c_web_tail$Survey = "1. Web-only"
c_web_phone_tail =  tail(c_web_phone,2)
c_web_phone_tail$Survey = "2. Phone/Web"
c_web_phone_video_tail = tail(c_web_phone_video,2)
c_web_phone_video_tail$Survey = "3. Video/Phone/Web"
combined_difficulty = Reduce(function(x, y) merge(x, y, all=TRUE), list(c_web_tail, c_web_phone_tail, c_web_phone_video_tail))
combined_difficulty = combined_difficulty[order(combined_difficulty$Survey),]
combined_difficulty = combined_difficulty %>% filter(Difficulty == "Difficult (3-5)")
combined_difficulty = combined_difficulty[, c(5,2,3,4)]
combined_difficulty = combined_difficulty %>%
rename(
"Survey Method" = Survey
)
kable(combined_difficulty, digits = 2, booktabs = TRUE, row.names = FALSE, caption = "Percentage of voters rating at least moderately difficult voting, by party") %>%
kable_styling(latex_options = "hold_position", full_width = F)
library(tidyverse)
library(magrittr)
library(knitr)
library(patchwork)
require(gridExtra)
library(moments)
library(reshape2)
library(ggplot2)
library(dplyr)
source("http://pcwww.liv.ac.uk/~william/R/crosstab.r")
library(kableExtra)
theme_set(theme_bw())
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo=FALSE, message=FALSE)
anes_timeseries_2020_csv_20220210 = read.csv("/Users/garykong/My Drive (Berkeley)/DATASCI W203/lab-1-caldwell_kong_somu_zhu/datasets/anes_timeseries_2020_csv_20220210.csv")
ANES = subset(anes_timeseries_2020_csv_20220210,
select = c(V200003, V201025x, V201231x, V202051, V200004, V202052, V202065x, V202066, V202119)) ## 8280 rows to begin with across all survey methods
ANES = ANES[!ANES$V200003 == 2,] ## 5441 rows
ANES = ANES[ANES$V200004 == 3,] #4783 rows
voting_logic <- function(df){
df$Voter = ( (df$V201025x== 3) |
(df$V201025x == 4) |
(df$V202052 == 1) |
(df$V202051 == 1) | (df$V202051 == 2) |
(df$V202066 == 4) )
df = df[df$Voter == TRUE,]
return (df)
}
ANES = voting_logic(ANES) #4507 rows
party_logic <- function(df){
df$Party = ifelse(df$V202065x==1, "Democrat",
ifelse(df$V202065x==2, "Republican",
ifelse((df$V201231x == 1) | (df$V201231x == 2) | (df$V201231x == 3), "Democrat",
ifelse((df$V201231x == 5) | (df$V201231x == 6) | (df$V201231x == 7), "Republican", "Other"))))
df = filter(df, Party == "Democrat" | Party == "Republican") ## removing non-Democrats or Republicans
return (df)
}
ANES = party_logic(ANES) #4098 rows
ANES = ANES[ANES$V202119 > 0,] ## 3772 rows
colnames(ANES)[colnames(ANES) == "V202119"] ="Voting_Difficulty_Level"
# Separate data by survey method
ANES = ANES[(ANES$V200003==3 | ANES$V200003==4 | ANES$V200003==5 | ANES$V200003==6),]
ANES$Survey = ifelse((ANES$V200003==3 | ANES$V200003==4), "Web-only",
ifelse(ANES$V200003==5, "Phone/Web",
ifelse(ANES$V200003==6, "Video/Phone/Web", "Other")))
# Splitting into three groups and stratifying
Web_Only = ANES[(ANES$V200003==3 | ANES$V200003==4),]
Web_Phone = ANES[ANES$V200003==5,]
Web_Phone_Video = ANES[ANES$V200003==6,]
# 1. Web-only
# Get crosstab data as a dataframe
web_df =  as.data.frame.matrix(crosstab(Web_Only, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_df = cbind(Difficulty=c(1:5, "Sum"), web_df)
web_df = web_df[web_df$Difficulty!="Sum",]
web_df = melt(web_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_df)[colnames(web_df) == "variable"] = "Party"
web_df$Percentage_of_Party = round(web_df$Percentage_of_Party, 1)
# 2. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_df =  as.data.frame.matrix(crosstab(Web_Phone, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_df)
web_phone_df = web_phone_df[web_phone_df$Difficulty!="Sum",]
web_phone_df = melt(web_phone_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_df)[colnames(web_phone_df) == "variable"] = "Party"
web_phone_df$Percentage_of_Party = round(web_phone_df$Percentage_of_Party, 1)
# 3. Web/Phone/Video
# Get crosstab data as a dataframe
web_phone_video_df =  as.data.frame.matrix(crosstab(Web_Phone_Video, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
web_phone_video_df = cbind(Difficulty=c(1:5, "Sum"), web_phone_video_df)
web_phone_video_df = web_phone_video_df[web_phone_video_df$Difficulty!="Sum",]
web_phone_video_df = melt(web_phone_video_df, id = "Difficulty", value.name = "Percentage_of_Party", names_to = c("Party"))
colnames(web_phone_video_df)[colnames(web_phone_video_df) == "variable"] = "Party"
web_phone_video_df$Percentage_of_Party = round(web_phone_video_df$Percentage_of_Party, 1)
colors = c("dodgerblue1", "brown2")
plot1 = ggplot(web_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Web-only",
subtitle = "n=1,590",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot2 = ggplot(web_phone_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Phone/Web",
subtitle = "n=1,664",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
plot3 = ggplot(web_phone_video_df, aes(Difficulty, y=Percentage_of_Party, fill = Party)) +
geom_bar(position='dodge', stat="identity") +
facet_grid(Party ~ .) + scale_fill_manual(values= colors) + labs(
title = "Video/Phone/Web",
subtitle = "n=518",
y = "Percentage of Party", x = "Difficulty Level") + theme(legend.position = "none") +
geom_text(aes(label=Percentage_of_Party), vjust=-.5, size=2.5) + ylim(0, 102)
grid.arrange(plot1, plot2, plot3, ncol=3)
dist_df = as.data.frame.matrix(crosstab(ANES, row.vars = "Survey", col.vars = "Party", type="c")$crosstab)
dist_df = dist_df[1:3, ]
dist_df = dist_df[order(-dist_df$Democrat),]
kable(dist_df, digits = 1, booktabs = TRUE, caption = "Distribution of valid responses, by party and survey method")%>%
kable_styling(latex_options = "hold_position", full_width = F)
# Web Only survey respondents
Dem_w = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_w = as.numeric(unlist(subset(Web_Only[Web_Only$Party == "Republican",], select=Voting_Difficulty_Level)))
# Phone/Web survey respondents
Dem_pw = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_pw = as.numeric(unlist(subset(Web_Phone[Web_Phone$Party == "Republican",], select=Voting_Difficulty_Level)))
# Video/Phone/Web survey respondents
Dem_vpw = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Democrat",], select=Voting_Difficulty_Level)))
Rep_vpw = as.numeric(unlist(subset(Web_Phone_Video[Web_Phone_Video$Party == "Republican",], select=Voting_Difficulty_Level)))
test1 = wilcox.test(x = Dem_w, y = Rep_w, alternative = "two.sided", correct=FALSE)
test2 = wilcox.test(x = Dem_pw, y = Rep_pw, alternative = "two.sided", correct = FALSE)
test3 = wilcox.test(x = Dem_vpw, y = Rep_vpw, alternative = "two.sided", correct = FALSE)
## Cross-tabs by survey group
# 1. Web only
# Get crosstab data as a dataframe
c_web = as.data.frame.matrix(crosstab(Web_Only, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web = cbind(Difficulty=c(1:5, "Sum"), c_web)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web[nrow(c_web)+1,] =
c("Not Difficult (1-2)", round(c_web$Democrat[1]+c_web$Democrat[2], digits = 2), round(c_web$Republican[1]+c_web$Republican[2], digits = 2))
# Transform values to numeric
c_web$Democrat = sapply(c_web$Democrat, as.numeric)
c_web$Republican = sapply(c_web$Republican, as.numeric)
c_web[nrow(c_web)+1,] =
c("Difficult (3-5)", round(c_web$Democrat[3]+c_web$Democrat[4]+c_web$Democrat[5], digits = 2), round(c_web$Republican[3]+c_web$Republican[4]+c_web$Republican[5], digits = 2))
c_web$Delta = sapply(c_web$Democrat, as.numeric) - sapply(c_web$Republican, as.numeric)
# 2. Phone/Web
# Get crosstab data as a dataframe
c_web_phone = as.data.frame.matrix(crosstab(Web_Phone, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web_phone = cbind(Difficulty=c(1:5, "Sum"), c_web_phone)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web_phone[nrow(c_web_phone)+1,] =
c("Not Difficult (1-2)", round(c_web_phone$Democrat[1]+c_web_phone$Democrat[2], digits = 2), round(c_web_phone$Republican[1]+c_web_phone$Republican[2], digits = 2))
# Transform values to numeric
c_web_phone$Democrat = sapply(c_web_phone$Democrat, as.numeric)
c_web_phone$Republican = sapply(c_web_phone$Republican, as.numeric)
c_web_phone[nrow(c_web_phone)+1,] =
c("Difficult (3-5)", round(c_web_phone$Democrat[3]+c_web_phone$Democrat[4]+c_web_phone$Democrat[5], digits = 2), round(c_web_phone$Republican[3]+c_web_phone$Republican[4]+c_web_phone$Republican[5], digits = 2))
c_web_phone$Delta = sapply(c_web_phone$Democrat, as.numeric) - sapply(c_web_phone$Republican, as.numeric)
# 3. Web_Phone_Video
# Get crosstab data as a dataframe
c_web_phone_video = as.data.frame.matrix(crosstab(Web_Phone_Video, row.vars="Voting_Difficulty_Level", col.vars = "Party", type="c")$crosstab)
# Add a new column as difficulty level
c_web_phone_video = cbind(Difficulty=c(1:5, "Sum"), c_web_phone_video)
# Classify difficulty level into "Not Difficult" and "Difficult"
c_web_phone_video[nrow(c_web_phone_video)+1,] =
c("Not Difficult (1-2)", round(c_web_phone_video$Democrat[1]+c_web_phone_video$Democrat[2], digits = 2), round(c_web_phone_video$Republican[1]+c_web_phone_video$Republican[2], digits = 2))
# Transform values to numeric
c_web_phone_video$Democrat = sapply(c_web_phone_video$Democrat, as.numeric)
c_web_phone_video$Republican = sapply(c_web_phone_video$Republican, as.numeric)
c_web_phone_video[nrow(c_web_phone_video)+1,] =
c("Difficult (3-5)", round(c_web_phone_video$Democrat[3]+c_web_phone_video$Democrat[4]+c_web_phone_video$Democrat[5], digits = 2), round(c_web_phone_video$Republican[3]+c_web_phone_video$Republican[4]+c_web_phone_video$Republican[5], digits = 2))
c_web_phone_video$Delta = sapply(c_web_phone_video$Democrat, as.numeric) - sapply(c_web_phone_video$Republican, as.numeric)
# tail(c_web_phone_video,2)
## Combined cross-tabs across survey groups
c_web_tail = tail(c_web,2)
c_web_tail$Survey = "1. Web-only"
c_web_phone_tail =  tail(c_web_phone,2)
c_web_phone_tail$Survey = "2. Phone/Web"
c_web_phone_video_tail = tail(c_web_phone_video,2)
c_web_phone_video_tail$Survey = "3. Video/Phone/Web"
combined_difficulty = Reduce(function(x, y) merge(x, y, all=TRUE), list(c_web_tail, c_web_phone_tail, c_web_phone_video_tail))
combined_difficulty = combined_difficulty[order(combined_difficulty$Survey),]
combined_difficulty = combined_difficulty %>% filter(Difficulty == "Difficult (3-5)")
combined_difficulty = combined_difficulty[, c(5,2,3,4)]
combined_difficulty = combined_difficulty %>%
rename(
"Survey Method" = Survey
)
kable(combined_difficulty, digits = 2, booktabs = TRUE, row.names = FALSE, caption = 'Percent of voters rating at least "Moderately Difficult" voting, by party')%>%
kable_styling(latex_options = "hold_position", full_width = F)
